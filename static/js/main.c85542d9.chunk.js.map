{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","button","App","max","sum","lowV","closeToTarget","highV","ghv","glv","found","countNfound","classes","useState","target","setTarget","exchange","setExchange","weight","inputFields","setInputField","handleSubmit","e","preventDefault","Math","map","inputField","index","Cal","i","forEach","item","parseFloat","confirmAlert","customUI","onClose","className","toFixed","onClick","console","log","options","title","message","buttons","label","alert","Container","maxWidth","onSubmit","Grid","xs","TextField","name","onChange","event","value","values","handleChangeInput","IconButton","splice","handleDelete","Button","variant","color","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAe,I,qHCUTA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACF,uBAAwB,CACpBC,OAAQF,EAAMG,QAAQ,KAK9BC,OAAQ,CACJF,OAAQF,EAAMG,QAAQ,QAyNbE,MApNf,WACE,IACMC,EADFC,EAAM,EAEJC,EAAO,EACPC,EAAgB,EAChBC,EAAQ,EACRC,EAAM,EACNC,EAAM,EAENC,GAAQ,EACRC,EAAc,EACZC,EAAUjB,IAChB,EAA4BkB,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAqCJ,mBAAS,CAC1C,CAAEK,OAAQ,MADd,mBAAOC,EAAP,KAAoBC,EAApB,KAcMC,EAAe,SAACC,GAClBA,EAAEC,iBAEFjB,EAAgB,EAEhBE,EAAM,EACNC,EAAM,EACNC,GAAQ,EACRC,EAAc,EACdH,EALAD,EAAQ,EAMRE,EARAJ,EAAO,EAUPF,EAAMqB,KAAKrB,IAAL,MAAAqB,KAAI,YAAQL,EAAYM,KAAI,SAACC,EAAYC,GAAb,OAAuBD,EAAWR,WAA1D,QAAmE,KAQ7EU,KAWJ,SAASA,IACL,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAiB1B,GAhBAV,EAAYW,SAAQ,SAACC,EAAMF,GACnBG,WAAWD,EAAKb,UAAYf,EAC5BC,GAAO4B,WAAWD,EAAKb,QAAUb,EAAO2B,WAAWhB,GAKnDZ,GAAO4B,WAAWD,EAAKb,QAAUX,EAAQyB,WAAWhB,OAQ5DV,EAAgBF,EAAM4B,WAAWlB,KACX,IAAQR,GAAiB,GAAUD,EAAOE,IAAoB,IAAVG,EAAgC,CACtGA,GAAQ,EAIRuB,uBAAa,CACTC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,sBAAKC,UAAU,YAAf,UACE,yCACA,4BAAI,kBAAoB/B,EAAKgC,QAAQ,KACrC,4BAAI,oBAAsB9B,EAAM8B,QAAQ,KACxC,4BAAI,UAAY/B,EAAc+B,QAAQ,KACtC,wBAAQC,QAASH,EAAjB,sBAOV,MAEJ/B,EAAM,EACFE,EAAgB,EAChBC,GAAS,IAEJD,EAAgB,IACrBD,GAAQ,MASF,IAAVK,IAEmB,KAAfC,GACA4B,QAAQC,IAAI,0BACZP,uBAAaQ,KAGb9B,IAGAJ,EAFAC,GAAO,GAGPH,EAFAI,GAAO,GAGPmB,MAMZ,IAAMa,EAAU,CACZC,MAAO,aACPC,QAAS,8BACTC,QAAS,CACL,CACIC,MAAO,MACPP,QAAS,WACL3B,EAAc,EAGdJ,EAFAC,GAAO,GAGPH,EAFAI,GAAO,GAIPmB,MAGR,CACIiB,MAAO,KACPP,QAAS,kBAAMQ,MAAM,eAkBjC,OACI,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UAEI,6CACA,uBAAMZ,UAAWxB,EAAQd,KAAMmD,SAAU5B,EAAzC,UACI,eAAC6B,EAAA,EAAD,CAAMnB,MAAI,EAACoB,GAAI,GAAf,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,SACLR,MAAM,eAENS,SAAU,SAAAC,GAAK,OAAIxC,EAAUwC,EAAMzC,OAAO0C,UAE9C,cAACJ,EAAA,EAAD,CACIC,KAAK,WACLR,MAAM,gBAENS,SAAU,SAAAC,GAAK,OAAItC,EAAYsC,EAAMzC,OAAO0C,aAInDrC,EAAYM,KAAI,SAACC,EAAYC,GAAb,OACb,gCACI,cAACyB,EAAA,EAAD,CACIC,KAAK,SACLR,MAAOlB,EAAQ,EACf6B,MAAO9B,EAAWR,OAClBoC,SAAU,SAAAC,GAAK,OA3Kb,SAAC5B,EAAO4B,GAC9B,IAAME,EAAM,YAAOtC,GACnBsC,EAAO9B,GAAO4B,EAAMzC,OAAOuC,MAAQE,EAAMzC,OAAO0C,MAChDpC,EAAcqC,GAwKyBC,CAAkB/B,EAAO4B,MAEhD,cAACI,EAAA,EAAD,CAAYrB,QAAS,kBAlCpB,SAACX,GAClB,IAAM8B,EAAM,YAAOtC,GACnBsC,EAAOG,OAAOjC,EAAO,GACrBP,EAAcqC,GA+B6BI,CAAalC,IAAxC,SACI,cAAC,IAAD,MAEJ,cAACgC,EAAA,EAAD,CAAYrB,QAAS,WAxCrClB,EAAc,GAAD,mBAAKD,GAAL,CAAkB,CAAED,OAAQ,QAwCzB,SACI,cAAC,IAAD,QAXES,MAed,cAACmC,EAAA,EAAD,CAAQ1B,UAAWxB,EAAQX,OAAQ8D,QAAQ,YAAYC,MAAM,UAAUC,KAAK,SAAS3B,QAASjB,EAA9F,8BCxND6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c85542d9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react'\nimport { Container, TextField, makeStyles, Button, IconButton, Grid } from '@material-ui/core'\nimport RemoveIcon from '@material-ui/icons/Remove'\nimport AddIcon from '@material-ui/icons/Add'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n      '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n      }\n\n\n  },\n  button: {\n      margin: theme.spacing(1),\n  }\n\n}))\n\nfunction App() {\n  let sum = 0;\n    let max;\n    let lowV = 0;\n    let closeToTarget = 0;\n    let highV = 1;\n    let ghv = 0;\n    let glv = 0;\n    let test =0;\n    let found = false;\n    let countNfound = 0;\n    const classes = useStyles()\n    const [target, setTarget] = useState('')\n    //const [found, setFound] = useState(false)\n    const [exchange, setExchange] = useState('')\n    const [inputFields, setInputField] = useState([\n        { weight: '' }\n\n    ])\n    //alert(\"asdasdsd \\n\" + \"Close= \" + closeToTarget + \"\\nLow value= \" + lowV + \"\\nHigh value = \" + highV+ \"\\nSum = \" + sum + \"\\nFound\"+ found)\n\n\n\n    const handleChangeInput = (index, event) => {\n        const values = [...inputFields];\n        values[index][event.target.name] = event.target.value;\n        setInputField(values)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        lowV = 0;\n        closeToTarget = 0;\n        highV = 1;\n        ghv = 0;\n        glv = 0;\n        found = false;\n        countNfound = 0;\n        ghv = highV\n        glv = lowV\n        // const sum = parseFloat((inputFields[0].weight)) + parseFloat((inputFields[1].weight))\n        max = Math.max(...inputFields.map((inputField, index) => inputField.weight), 0)\n        /*inputFields.forEach((item, i) => {\n\n            sum += parseFloat((item.weight));\n            //max = Math.max(item.weight)\n\n        })*/\n\n        Cal();\n\n\n\n\n        //console.log(Math.max(...inputFields.map((inputField, index) => inputField.weight),0))\n        //console.log(closeToTarget)\n        //console.log(exchange)\n        //console.log(sum.toFixed(2))\n    }\n\n    function Cal() {\n        for (let i = 0; i < 100; i++) {\n            inputFields.forEach((item, i) => {\n                if (parseFloat(item.weight) === max) {\n                    sum += parseFloat(item.weight) * lowV * parseFloat(exchange);\n                    \n\n                }\n                else {\n                    sum += parseFloat(item.weight) * highV * parseFloat(exchange);\n                    //alert(\"high \"+sum + \"\\n\"+ item.weight )\n                }\n                //alert(\"high \" + sum + \"\\n\" + item.weight)\n                //sum += parseFloat((item.weight));\n                //max = Math.max(item.weight)\n\n            })\n            closeToTarget = sum - parseFloat(target)\n            if ((closeToTarget <= 0.90 && closeToTarget >= 0.00) && (lowV < highV) && found === false /*&& b>=0.10*/) {\n                found = true;\n\n                //alert(\"Close= \" + closeToTarget.toFixed(2) + \"\\nLow value= \" + lowV.toFixed(2) + \"\\nHigh value = \" + highV.toFixed(2))\n\n                confirmAlert({\n                    customUI: ({ onClose }) => {\n                      return (\n                        <div className='custom-ui'>\n                          <h1>Results</h1>\n                          <p>{\"Lower wieghts= \" + lowV.toFixed(2)}</p>\n                          <p>{\"Highest wieght = \" + highV.toFixed(2)}</p>\n                          <p>{\"Close= \" + closeToTarget.toFixed(2)}</p>\n                          <button onClick={onClose}>Ok</button>\n                          \n                        </div>\n                      );\n                    }\n                  });\n\n                break;\n            }\n            sum = 0;\n            if (closeToTarget > 0) {\n                highV -= 0.01;\n            }\n            else if (closeToTarget < 0) {\n                lowV += 0.01;\n            }\n        }\n       \n        Loop();\n\n    }\n\n    function Loop() {\n        if (found === false) {\n\n            if (countNfound == 1000) {\n                console.log(\"1000 loops past!!!!!!!\")\n                confirmAlert(options);\n            }\n            else {\n                countNfound++;\n                ghv += 0.10;\n                glv += 0.10;\n                highV = ghv;\n                lowV = glv;\n                Cal();\n            }\n\n        }\n    }\n\n    const options = {\n        title: 'Not found!',\n        message: 'Do you want to search more?',\n        buttons: [\n            {\n                label: 'Yes',\n                onClick: () => {\n                    countNfound = 0;\n                    ghv += 0.10;\n                    glv += 0.10;\n                    highV = ghv;\n                    lowV = glv;\n                   \n                    Cal();\n                },\n            },\n            {\n                label: 'No',\n                onClick: () => alert('See you')\n            }\n        ]\n\n    };\n\n\n\n    const handleAdd = () => {\n        setInputField([...inputFields, { weight: '' }])\n    }\n\n    const handleDelete = (index) => {\n        const values = [...inputFields];\n        values.splice(index, 1);\n        setInputField(values);\n    }\n\n    return (\n        <Container maxWidth=\"sm\">\n\n            <h1>Add Weights</h1>\n            <form className={classes.root} onSubmit={handleSubmit}>\n                <Grid item xs={12}>\n                    <TextField\n                        name=\"target\"\n                        label=\"Target Value\"\n                        //value={target.weight}\n                        onChange={event => setTarget(event.target.value)}\n                    />\n                    <TextField\n                        name=\"exchange\"\n                        label=\"Exchange Rate\"\n                        //value={target.weight}\n                        onChange={event => setExchange(event.target.value)}\n                    />\n                </Grid>\n\n                {inputFields.map((inputField, index) => (\n                    <div key={index}>\n                        <TextField\n                            name=\"weight\"\n                            label={index + 1}\n                            value={inputField.weight}\n                            onChange={event => handleChangeInput(index, event)}\n                        />\n                        <IconButton onClick={() => handleDelete(index)}>\n                            <RemoveIcon />\n                        </IconButton>\n                        <IconButton onClick={() => handleAdd()}>\n                            <AddIcon />\n                        </IconButton>\n                    </div>\n                ))}\n                <Button className={classes.button} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={handleSubmit}>Calculate</Button>\n            </form>\n\n\n        </Container>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}